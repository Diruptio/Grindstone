From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "Fabi.exe" <66797305+FabiPunktExe@users.noreply.github.com>
Date: Sun, 30 Jun 2024 10:25:03 +0200
Subject: [PATCH] Disable item merging


diff --git a/src/main/java/diruptio/grindstone/GrindstoneConfig.java b/src/main/java/diruptio/grindstone/GrindstoneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0187f24c8892a994e4a7061f7f70b798641100b
--- /dev/null
+++ b/src/main/java/diruptio/grindstone/GrindstoneConfig.java
@@ -0,0 +1,137 @@
+package diruptio.grindstone;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.*;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class GrindstoneConfig {
+    private static final String HEADER = """
+            This is the main configuration file for Grindstone.
+            As you can see, there's tons to configure. Some options may impact gameplay, so use
+            with caution, and make sure you know what each option does before configuring.
+
+            Website: https://diruptio.de
+            Docs: Coming soon
+            """;
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    public static int version;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load grindstone.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(GrindstoneConfig.class, null);
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List<?> getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+
+    public static boolean disableItemMerging = false;
+
+    private static void entityOptions() {
+        if (version >= 1) {
+            disableItemMerging = getBoolean("entity.item.disable-merging", disableItemMerging);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 744cfc91fa8b78794f1edab1f81035b21bf0c83f..7d0d7e686da04abf2141909a213b060b34290bbe 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -248,6 +248,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Grindstone start
+        try {
+            diruptio.grindstone.GrindstoneConfig.init((java.io.File) options.valueOf("grindstone-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // Grindstone end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index 499646ad26d148953abf241d90e053870fedb708..e3412f02a228affd2918678a61bcf43451b6d4f0 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -214,9 +214,11 @@ public class ItemEntity extends Entity implements TraceableEntity {
             boolean flag = Mth.floor(this.xo) != Mth.floor(this.getX()) || Mth.floor(this.yo) != Mth.floor(this.getY()) || Mth.floor(this.zo) != Mth.floor(this.getZ());
             int i = flag ? 2 : 40;
 
+            if (!diruptio.grindstone.GrindstoneConfig.disableItemMerging) { // Grindstone
             if (this.tickCount % i == 0 && !this.level().isClientSide && this.isMergable()) {
                 this.mergeWithNeighbours();
             }
+            } // Grindstone
 
             /* CraftBukkit start - moved up
             if (this.age != -32768) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d87ecd6e7552ab537c9d9e8a10a471814e61632d..9906d5136ff60257e7fb347658e13b5cec59eb55 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -255,6 +255,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
@@ -1085,6 +1086,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        diruptio.grindstone.GrindstoneConfig.init((File) console.options.valueOf("grindstone-settings")); // Grindstone
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -3069,6 +3071,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Grindstone start
+        @Override
+        public @NotNull YamlConfiguration getGrindstoneConfig() {
+            return diruptio.grindstone.GrindstoneConfig.config;
+        }
+        // Grindstone end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 260f79affee997adbe8d08f2a2cb3aa68083f497..8f69cce2233263eba57f05940c4faac481712340 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -184,6 +184,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // Grindstone Start
+                acceptsAll(asList("grindstone", "grindstone-settings"), "File for grindstone settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("grindstone.yml"))
+                        .describedAs("Yml file");
+                // Grindstone end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
